generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  profile       Json?
  timeZone      String?         @default("UTC")
  preferences   Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  auditLogs     AuditLog[]
  calendarBusy  CalendarBusy[]
  credentials   Credential[]
  events        Event[]
  eventDrafts   EventDraft[]
  ingestCursors IngestCursor[]
  memories      Memory[]
  ingestedMsgs  MessageIngest[]
  sessions      Session[]
  tasks         Task[]

  // Personalized Planner learning relations
  learningProfile UserProfile?
  facts          UserFact[]
  chunks         SemanticChunk[]
  signals        Signal[]
  banditPolicies BanditPolicy[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credential {
  id                    String             @id @default(cuid())
  userId                String
  provider              CredentialProvider
  encryptedAccessToken  Bytes?
  encryptedRefreshToken Bytes?
  expiresAt             DateTime?
  scope                 String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
}

model Task {
  id                   String         @id @default(cuid())
  userId               String
  source               Source
  title                String
  description          String?
  priority             Int?           @default(0)
  effortMinutes        Int?
  dueAt                DateTime?
  hardDeadline         Boolean        @default(false)
  location             String?
  tags                 String[]       @default([])
  requiresHuman        Boolean        @default(false)
  blockingTaskId       String?
  createdFromMessageId String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  events               Event[]
  eventDrafts          EventDraft[]
  blockingTask         Task?          @relation("TaskBlocks", fields: [blockingTaskId], references: [id])
  blockedByTasks       Task[]         @relation("TaskBlocks")
  createdFrom          MessageIngest? @relation("TaskFromMessage", fields: [createdFromMessageId], references: [id])
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueAt])
}

model EventDraft {
  id         String         @id @default(cuid())
  userId     String
  taskId     String?
  title      String?
  startsAt   DateTime
  endsAt     DateTime
  rationale  String?
  confidence Float?
  status     EventDraftStatus @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  task       Task?           @relation(fields: [taskId], references: [id])
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EventDraftStatus {
  PENDING
  CONFIRMED
  DECLINED
  DELETED
}

model Event {
  id         String   @id @default(cuid())
  userId     String
  taskId     String?
  title      String
  startsAt   DateTime
  endsAt     DateTime
  externalId String?
  calendarId String?
  confirmed  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  task       Task?    @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startsAt])
}

model MessageIngest {
  id              String   @id @default(cuid())
  userId          String
  source          Source
  hashedMessageId String   @unique
  receivedAt      DateTime
  // Raw email fields for focused ingestion
  metadata        Json?
  fromEmail       String?
  fromDomain      String?
  subject         String?
  headers         Json?
  bodyPlain       String?
  bodyHtml        String?
  snippet         String?

  // Focused inbox fields
  isFocused       Boolean  @default(false)
  focusedScore    Float    @default(0)
  focusReason     String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks           Task[]   @relation("TaskFromMessage")
}

model IngestCursor {
  id            String    @id @default(cuid())
  userId        String
  source        Source
  cursor        String?
  lastFetchedAt DateTime?
  metadata      Json?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, source])
}

model CalendarBusy {
  id              String   @id @default(cuid())
  userId          String
  source          Source   @default(CALENDAR)
  externalEventId String
  calendarId      String?
  title           String?
  startsAt        DateTime
  endsAt          DateTime
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, externalEventId])
  @@index([userId, startsAt])
}

model Memory {
  id        String   @id @default(cuid())
  userId    String
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  tool      String
  before    Json?
  after     Json?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

enum Source {
  EMAIL
  SLACK
  MANUAL
  CALENDAR
}

enum CredentialProvider {
  GOOGLE
  SLACK
}

// === Personalized Planner Learning Models ===

// Enhanced user profile for personalized planning
model UserProfile {
  id          String @id @default(cuid())
  userId      String @unique
  profileJson Json   // goals, constraints, preferences, work patterns, etc.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Structured facts extracted from user behavior and sources
model UserFact {
  id            String    @id @default(cuid())
  userId        String
  factType      String    // "preference", "constraint", "goal", "pattern", "skill", "availability"
  key           String    // e.g., "work_hours", "break_preference", "energy_pattern"
  value         String    // e.g., "9-17", "15min", "morning_person"
  confidence    Float     @default(0.5) // 0-1, how confident we are in this fact
  source        String?   // "gmail", "slack", "calendar", "explicit", "inferred"
  halfLifeDays  Int       @default(30) // How many days until confidence halves
  lastValidated DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, factType, key])
  @@index([userId, confidence])
}

// Semantic chunks for vector retrieval
model SemanticChunk {
  id        String  @id @default(cuid())
  userId    String
  content   String
  source    Source
  sourceId  String? // Reference to original message, task, etc.
  chunkType String  // "email_thread", "task_context", "meeting_notes", etc.
  metadata  Json?

  // pgvector embedding - enabled when pgvector is set up
  // embedding Unsupported("vector")?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, chunkType])
}

// User signals for learning
model Signal {
  id        String    @id @default(cuid())
  userId    String
  key       String    // "plan_accepted", "task_completed", "event_cancelled", etc.
  signal    String    // The actual signal data
  delta     Float?    // Weight/magnitude of the signal (-1 to 1)
  banditKey String?   // For A/B testing variants
  success   Boolean?  // For bandit arm outcomes
  metadata  Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, key])
  @@index([userId, banditKey])
}

// Multi-armed bandit policy for A/B testing
model BanditPolicy {
  id        String @id @default(cuid())
  userId    String
  banditKey String // "planner:variant", "ui:layout", etc.
  armName   String // "A", "B", "control", etc.
  pulls     Int    @default(0)
  rewards   Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, banditKey, armName])
  @@index([userId, banditKey])
}
